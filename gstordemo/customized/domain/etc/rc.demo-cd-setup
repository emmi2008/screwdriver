#!/bin/bash
. /domain/etc/init/setupfunctions
alias tftp='busybox tftp'
ifconfig lo 127.0.0.1
[ "`basename $0`" = "rc.demo-cd-setup" ] && is_cdbootup=1 || is_cdbootup=0

#setup nodeid, subnet, weather or not as an pxe server to bootup other nodes.
#setup other nodes pxe config
#setup glusterfs bricks, if one disk is not initialized, ask to add as a brick
#setup ctdb service configure by asking how many nodes added
#only two 1000Mbps+ link will be used: one for gluster, one for ctdb

#IP Policy
#public IP
#	main IP
#	demo-cd node: SUBNET.20, (40 for shell, if any)
#	demo-pxe node: SUBNET.21~23	#4 nodes MAX

#	reserved IP for each node, 4 max per node: 30+(nodeip-20)*4~(nodeip-20)*4+3
#internal node IP, on second(eth1) nic
#	same as public IP, SUBNET is 10.99.0.0/16 default

#storage Policy
#	filesystem XFS
#	ask for each disk without whole disk XFS filesystem, then format it as a brick
#	brickname same as devname
#	persistent config such as /var/lib/* will be stored in first brick! and restore when bootup next time, under $dir/.democonfig/.
#	a lock volume will be created on demo-cd node, mount as ctdb lock dir
#	all formatted as XFS and with gluster signed dev will be mount under /bricks/devname

#default setting
internal_subnet=10.99
internal_nic=eth0
public_net=10.10
public_nic=eth1
netmask=255.255.0.0
product=GSTOR

check_nics(){
	oknic=0
	for nic in `cat /proc/net/dev|grep eth[0-9]*:|cut -d: -f1|sed 's/ //g'`
	do
		link=`ethtool $nic|grep Speed:|cut -d' ' -f2`
		if [ "$link" != '1000Mb/s' -a "$link" != "10000Mb/s" ];then
			echo "NIC $nic link at speed $link, will not be used."	
			continue
		fi
		let oknic++
		if [ $oknic -eq 1 ];then
			echo "NIC $nic link at speed $link, will be used as internal connection"
			internal_nic=$nic
		elif [ $oknic -eq 2 ];then
			echo "NIC $nic link at speed $link, will be used as public connection"
			public_nic=$nic
			return 0
		fi
	done
	if [ $oknic -ne 2 ];then
		read -p "
We need TWO 1000Mbps/10000Mbps ethernet link, but only $oknic found. please check your server NIC links.

press Enter key to continue ..."
		
	fi
	return 1
}

get_pxe_nodeid(){
	. /etc/pxeinfo
	#sample
	#dns=198.88.88.1
	#interface=eth0
	#ip=198.88.88.172
	#lease=7200
	#mask=24
	#opt53=05
	#router=198.88.88.1
	#serverid=198.88.88.1
	#subnet=255.255.255.0
}

get_public_subnet(){

	public_subnet=`waitinput "Public network prefix? default is 10.10, thus, public network is 10.10.0.0/16, input your setting: " 10.10`
	ifconfig $public_nic $public_subnet.100.1
	return $?
}

setup_pxe_server(){
	echo "Setup up PXE server ..."	
}

#let's begin
read -p "
This is a DEMO node for $product, we need TWO 1000Mbps/10000Mbps NIC, and at least TWO(more is better) local SCSI disk to accomplish this demostration, please check the server for these conditions.

press Enter key to continue ..."

#we need two giga/10g nic for demo
while true
do
	check_nics && break
done

if [ $is_cdbootup -eq 1 ];then
	while true
	do
		get_public_subnet && break
	done
	#CD boot need this!
	nodeid=0
	while true
	do
		nodeid=`waitinput "Is this the first node of $product? if not, given a number (1-3) as node ID " 0|sed 's/[^1-3]//g'`
		[ -z "$nodeid" -o $nodeid -gt 3 -o $nodeid -lt 1 ] && continue
		break;
	done
else
	#PXE boot up
	nodeid=`cat /proc/cmdline|sed "s/ /\n/g"|grep NODEID|cut -d= -f2`
	public_net=`cat /proc/cmdline|sed "s/ /\n/g"|grep NETID|cut -d= -f2`
	nodecount=`cat /proc/cmdline|sed "s/ /\n/g"|grep NODECNT|cut -d= -f2`
fi

#should we server the other nodes?
nodecount=1
if [ $is_cdbootup -eq 1 -a $nodeid -eq 0 ];then
	othercount=`waitinput "How many other nodes will be setup for demostration? (The other nodes will be bootup by PXE, range 0-4, default is 1) " 1|sed 's/[^0-9]//g'`
	nodecount=$((nodecount+othercount))

	if [ "$othercount" -ge 1 ];then
		setup_pxe_server
		read -p "
The other nodes can be boot up by PXE now, please assure there is no other unused server or client using DHCP to request the ip for demo nodes during the demo nodes bootup!

press Enter key to continue ..."
	fi
fi


case $nodeid in
0)
	public_ip=$public_subnet.0.20
	internal_ip=$internal_subnet.0.20
	;;
1)
	public_ip=$public_subnet.0.21
	internal_ip=$internal_subnet.0.21
	;;
2)
	public_ip=$public_subnet.0.22
	internal_ip=$internal_subnet.0.22
	;;
3)
	public_ip=$public_subnet.0.23
	internal_ip=$internal_subnet.0.23
	;;
esac

#now setup config files
cat >/tmp/.demo.setup <<EOF
nodecount=$nodecount
nodeid=$nodeid
nodename=$nodename
public_nic=$public_nic
public_ip=$public_ip
public_subnet=$public_subnet.0.0/16
internal_nic=$internal_nic
internal_ip=$internal_ip
internal_subnet=$internal_setup
EOF

#
#setup ip
#

ifconfig $internal_nic $internal_ip netmask 255.255.0.0 up

#setup ctdb
#
cat >/etc/ctdb/public_addresses <<EOF
$public_subnet.0.20/16 $public_nic
$public_subnet.0.21/16 $public_nic
$public_subnet.0.22/16 $public_nic
$public_subnet.0.23/16 $public_nic
EOF

cat >/etc/ctdb/nodes <<EOF
$internal_subnet.0.20/16
$internal_subnet.0.21/16
$internal_subnet.0.22/16
$internal_subnet.0.23/16
EOF

cat >/etc/sysconfig/ctdb <<EOF
CTDB_RECOVERY_LOCK="/mnt/demovol/ctdb/lock"
# CTDB_PUBLIC_INTERFACE=eth0
CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses
# CTDB_LVS_PUBLIC_IP=10.1.1.1
CTDB_MANAGES_SAMBA=yes
# CTDB_SAMBA_SKIP_SHARE_CHECK=yes
# CTDB_NFS_SKIP_SHARE_CHECK=yes
# CTDB_SAMBA_CHECK_PORTS="445"
CTDB_MANAGES_WINBIND=yes
# CTDB_MANAGES_VSFTPD=yes
# CTDB_MANAGES_ISCSI=yes
# CTDB_MANAGES_NFS=yes
# CTDB_MANAGES_HTTPD
# CTDB_INIT_STYLE=redhat
# CTDB_SERVICE_SMB=smb
# CTDB_SERVICE_NMB=nmb
# CTDB_SERVICE_WINBIND=winbind
ulimit -n 10000
# CTDB_NODES=/etc/ctdb/nodes
# CTDB_NOTIFY_SCRIPT=/etc/ctdb/notify.sh
# CTDB_DBDIR=/var/ctdb
# CTDB_DBDIR_PERSISTENT=/var/ctdb/persistent
# CTDB_EVENT_SCRIPT_DIR=/etc/ctdb/events.d
# CTDB_SOCKET=/tmp/ctdb.socket
# CTDB_TRANSPORT="tcp"
# CTDB_MONITOR_FREE_MEMORY=100
# CTDB_START_AS_DISABLED="yes"
# CTDB_CAPABILITY_RECMASTER=yes
# CTDB_CAPABILITY_LMASTER=yes

# CTDB_NATGW_PUBLIC_IP=10.0.0.227/24
# CTDB_NATGW_PUBLIC_IFACE=eth0
# CTDB_NATGW_DEFAULT_GATEWAY=10.0.0.1
# CTDB_NATGW_PRIVATE_NETWORK=10.1.1.0/24
# CTDB_NATGW_NODES=/etc/ctdb/natgw_nodes


# PER_IP_ROUTING configuration
# CTDB_PER_IP_ROUTING_DEBUG=yes lets the script print out
# CTDB_DEBUGLEVEL=DEBUG implies CTDB_PER_IP_ROUTING_DEBUG=yes.
#
# CTDB_PER_IP_ROUTING_CONF="/etc/ctdb/per_ip_routing.conf"
# CTDB_PER_IP_ROUTING_CONF="__auto_link_local__"
# CTDB_PER_IP_ROUTING_TABLE_ID_LOW=10
# CTDB_PER_IP_ROUTING_TABLE_ID_HIGH=250
# CTDB_PER_IP_ROUTING_RULE_PREF=10000
# CTDB_PER_IP_ROUTING_DEBUG=no

# CTDB_PARTIALLY_ONLINE_INTERFACES="yes"

# CTDB_LOGFILE=/var/log/log.ctdb
CTDB_DEBUGLEVEL=ERR

# CTDB_SUPPRESS_COREFILE=yes

# CTDB_SYSLOG=no

# CTDB_RUN_TIMEOUT_MONITOR=no

# CTDB_MAX_PERSISTENT_CHECK_ERRORS=0

# CTDB_LOG_RINGBUF_SIZE=500000
#    CTDB_SET_TRAVERSETIMEOUT=60
# CTDB_OPTIONS=

EOF

cat >/etc/samba/smb.conf <<EOF
[global]
	clustering = yes
	idmap backend = tdb2
	private dir=/mnt/demovol/ctdb
	field:mapping = fsname
	use mmap = no
	nt acal support = yes
	ea support = yes
[public]
	comment= public share
	path = /mnt/demovol/public
	public = yes
	writeable = yes
EOF


read -p "press Enter key to continue storage setup ..."

>/tmp/.demo.newbricks
>/tmp/.demo.freebricks
>/tmp/.demo.usedbricks

getdiskinfo(){
	dev=$1
	fdisk -l $dev 2>/dev/null|grep ^Disk|grep -v iden
}

getusedinfo(){
	dev=$1
	cat /tmp/.demo.checking|grep /dev/$dev[0-9]*|sed 's/"//g'|sed 's/UUID.*TYPE=//g'
}

ask_for_brick(){
	dev=$2
	if [ "$1" = "clean" ];then
		info=`getdiskinfo $dev`
		cfm=`waitinput "Disk $dev($info) is FREE now, add to storage pool[yes/NO]? " no`
		if [ "$cfm" = "yes" ];then
			echo $dev >>/tmp/.demo.newbricks
		else
			echo $dev >>/tmp/.demo.freebricks
		fi
	else
		info=`getdiskinfo $dev`
		cfm=`waitinput "Disk $dev($info) is USED now: 
`getusedinfo $dev`

Add $dev to storage pool[yes/NO]? " no`
		if [ "$cfm" = "yes" ];then
			echo $dev >>/tmp/.demo.newbricks
		fi
	fi
}

ask_re_format(){
	dev=$1
#todo: really need this?
}

check_brick()
{
	sdev=$1
	cat /tmp/.demo.checking|grep /dev/$sdev[0-9]* >/dev/null
	if [ $? -ne 0 ];then
		#it's free
		ask_for_brick clean $sdev
	else
		blkid /dev/$sdev -t TYPE=xfs>/dev/null
		if [ $? -eq 0 ];then
			#try to mount it as an bricks
			mkdir /bricks/$sdev -p
			mount -t xfs -o rw,quota,noatime /dev/$sdev /bricks/$sdev
			if [ $? -eq 0 ];then
				attr -l /bricks/$sdev|grep gfid >/dev/null
				[ $? -eq 0 ] && ask_re_format $sdev && echo $sdev >>/tmp/.demo.usedbricks && let brickno++ && (
	[ $brickno -eq 1 ] && echo $sdev >/tmp/.demo.savebrick || :	
) && return 0
				#xfs but not bricks
				#ask it first
				umount /dev/$sdev
				ask_for_brick clean $sdev
				return $?
			fi
		else
			ask_for_brick dirty $sdev	
		fi
	fi
}

brickno=0
blkid >/tmp/.demo.checking 2>/dev/null

#check block devs
#result:	/tmp/.demo.checking, all
#		/tmp/.demo.usedbricks, used, mounted
#		/tmp/.demo.freebricks, free, but will not be used
#		/tmp/.demo.newbricks, free, need to be added
#		/tmp/.demo.savebrick, used, first brick, configuration, swap will be here.

for sdev in `ls /sys/block|grep ^sd`
do
	check_brick $sdev
done


#format new bricks
>/tmp/.demo.bricks-to-add
newbcount=0
for sdev in `cat /tmp/.demo.newbricks`
do
	cfm=`waitinput "Disk $sdev will be formatted, all data on it will be LOSE! would you like to do this?[yes/NO] " no`
	[ "$cfm" != "yes" ] && continue;
	mkfs.xfs $sdev 2>/dev/null >/dev/null
	[ $? -ne 0 ] && readp -p "Fail to format $sdev, skip to add to pool." && continue
	mkdir /bricks/$sdev -p
	mount -t xfs -o rw,quota,noatime /dev/$sdev /bricks/$sdev 2>/dev/null >/dev/null	
	[ $? -ne 0 ] && readp -p "Fail to add $sdev, skip to add to pool." && continue
	echo "/bricks/$sdev" >>/tmp/.demo.bricks-to-add	
	let brickno++
	let newbcount++
	[ $brickno -eq 1 ] && echo $sdev >/tmp/.demo.savebrick || :	
done

#now initialize savebrick
if [ -f /tmp/.demo.savebrick ];then
	sdev=`cat /tmp/.demo.savebrick`
	if [ ! -f /bricks/$sdev/.swap ];then
		echo "Creating swap on disk $sdev ..."
		dd if=/dev/zero of=/bricks/$sdev/.swap bs=1M count=1024 >/dev/null 2>/dev/null
		mkswap /bricks/$sdev/.swap
	fi	
	swapon /bricks/$sdev/.swap
	if [ -f /bricks/$sdev/.demo.saving/saved.tgz ];then
		tar zxf /bricks/$sdev/.demo.saving/saved.tgz -C /var/
	else
		attr -l /bricks/$sdev|grep gfid >/dev/null
		if [ $? -eq 0 ];then
			#aleady mounted
			read -p "
Saved configuration miss. demostration maybe unexpectable, to clean the enviroment, please re-format disk $sdev, and run demo again!

press Enter to continue demostration ..."
		else
			#newly setup, to setup volumes, later
			touch /tmp/.demo.newly
		fi
	fi
else
	read -p "
No disk avaliable for demostration!
press Enter to continue, or press Ctrl+Alt+Del to reboot and config again ..."
fi

