#!/bin/bash
. /domain/etc/init/setupfunctions
#shared_brick=/bricks/_shared
#shared_vol=_shared

[ ! -f /tmp/.demo.savebrick ] && echo "need disks to demo ..." && exit
create_uuid(){

	uuidfile=/var/lib/glusterd/glusterd.info
	[ -f $uuidfile ] && return 0
	echo UUID=`uuidgen` >$uuidfile
}

create_uuid
mkdir /var/log/glusterd -p
/etc/init.d/glusterd start

. /tmp/.demo.setup

shared_brick=/bricks/`cat /tmp/.demo.savebrick`/$shared_vol

newvol=
ask_add_or_create()
{
	read -p "
Demovol already exists, create new volume?[yes/NO] " cfm
	[ "$cfm" != "yes" ] && newvol=demovol && return 0
	while [ -z "$newvol" -o "$newvol" = "demovol" ]
	do
		read -p "
New volume name?(waring, ever created same name volume will be wipped, all data on it will be lost!) " newvol
		if [ ! -z "$newvol" -a ! -z "`grep ^$newvol$ /tmp/.demo.volumelist`" ];then
			over=`waitinput "Volume $newvol already exits, add to this volume?[YES/no] " yes`
			if [ "$over" = "yes" ];then
				echo "Ok, new disk will be added to volume $newvol."
				newvol=$newvol
				return 0
			fi
		fi
	done
	return 1
}

probe_other(){
	ret=0
	for nid in `seq 0 $((nodecount-1))`
	do
		if [ "$nodename" = node$nid ];then
			echo "Skip checking local node $nodename."
			continue
		fi
		echo "Checking node$nid ..."
		gluster peer probe $internal_subnet.0.2$nid
		[ $? -eq 0 ] && let ret++
	done
	gluster peer status	
	echo 
	#ok peer count
	return `gluster peer status|grep "(Connected)"|wc -l`
}

ask_for_volume_sync(){
	cfm=`waitinput "Sync volume info with other nodes?[yes/NO] " no`
	[ "$cfm" != "yes" ] && return
	rm /var/lib/glusterd/vols/* -rf
	echo "Syncing volume info from other nodes ..."
	/etc/init.d/glusterd restart 2>/dev/null >/dev/null
	sleep 2
}

probe_other
okcnt=$?
if [ $okcnt -ne 0 ];then
	ask_for_volume_sync
fi


add_shared_volume(){
	gluster volume list|grep $shared_vol >/dev/null 2>/dev/null
	if [ $? -eq 0 ];then
		#add bricks to 
		echo "Join shared volume ..."
		bricks=`gluster volume status $shared_vol|grep ^Brick|wc -l`
		gluster volume add-brick $shared_vol replica $((bricks+1)) $internal_ip:/$shared_brick
	else
		#create new 
		echo "Setup shared volume ..."
		gluster volume create $shared_vol $internal_ip:/$shared_brick
		gluster volume start $shared_vol
	fi

}

if [ -f /tmp/.demo.newly ];then
	#first time run-demo
	#add all bricks to striped root volume
	#add peers
	add_shared_volume
	gluster volume list 2>/dev/null|tee /tmp/.demo.volumelist|grep demovol >/dev/null
	if [ $? -eq 0 ];then
		#should not be 
		ask_add_or_create
		if [ $? -eq 0 ];then
		#add to demovol
			act=add-brick
		else
			act=create
		fi
		volname=$newvol
	else
		act=create
		volname=demovol
	fi
	if [ "$act" = "create" ];then
		#todo, using shared vol as config
		echo 
	fi
else
	newcount=`cat /tmp/.demo.bricks-to-add|wc -l`	
	if [ "$newcount" -ne 0 ];then
		#todo, ask for new volname or just add to old		
		#should not be 
		ask_add_or_create
		if [ $? -eq 0 ];then
		#add to demovol
			act=add-brick
		else
			act=create
		fi
		volname=$newvol
	fi
	#gluster volume sync all
fi
peercount=$((nodecount-1))
newcount=`cat /tmp/.demo.bricks-to-add|wc -l`	
mode="stripe $nodecount"
ask_for_strip_or_replica()
{
	m=`waitinput "Use newly added $newcount disks as replica/stripe/distributed mode [default=distributed]? " distributed`
	[ "$m" = "stripe" ] && dc=$newcount || dc=2
	[ "$m" = "distributed" ] && return 0
	c=`waitinput "$m count [default=$dc] " $dc`
	[ "$m" = "stripe" ] && echo "stripe $c"
	[ "$m" = "replica" ] && echo "replica $c"
}

if [ $newcount -ne 0 ];then
	#add all new bricks to demovol/or new create vol
	bricks=
	for br in `cat /tmp/.demo.bricks-to-add`
	do
		#todo: more securitty check for exitsted volume...
		[ -d $br/$volname/.glusterfs ] && echo "Old volume info on $volname, this disk will not be added." && continue
		mkdir -p $br/$volname
		brn=$br/$volname
		bricks=$bricks" $internal_ip:$brn"
	done

	[ "$act" = "create" ] && mode=`ask_for_strip_or_replica $nodecount` || mode=
	[ -z "$mode" ] && nmode="distributed" || nmode=`echo $mode|cut -d' ' -f 1`

	[ $act = 'create' ] && echo "Create new $nmode volume $volname ..." || echo "expand existed volume $volname ..."
	#echo "	volume $act $volname $mode $bricks"
	gluster volume $act $volname $mode $bricks
	#[ $? -eq 0 ] && echo "Add disk OK." || echo "Add disk FAIL."
	[ "$act" = "create" ] && gluster volume start $volname
fi

get_swap_size(){
	maxsize=`df -m|grep $1|awk '{print $2}'`
	if [ $maxsize -le 10240 ];then
		echo $((maxsize/10))
	else
		echo 1024
	fi
}

if [ -f /tmp/.demo.savebrick ];then
	sdev=`cat /tmp/.demo.savebrick`
	if [ ! -f /bricks/$sdev/.swap ];then
		echo "Creating swap on disk $sdev ..."
		dd if=/dev/zero of=/bricks/$sdev/.swap bs=1M count=`get_swap_size /bricks/$sdev` >/dev/null 2>/dev/null
		mkswap /bricks/$sdev/.swap 2>/dev/null
	fi	
	swapon /bricks/$sdev/.swap
fi

#mount created volume's
>/tmp/.demo.smbshare
for volume in `gluster volume list|grep -v '^No volumes present'`
do
	mkdir /mnt/$volume -p
#	mount -t glusterfs $internal_ip:/$volume /mnt/$volume
	echo "Mounting $volume ..."
	mount -t glusterfs 127.0.0.1:/$volume /mnt/$volume
	[ $? -ne 0 ] && waitmsg "Mount $volume FAIL!" && continue
	sleep 2
	echo "Mount $volume OK!"
	df -m|grep "^File\|/mnt/$volume$"
	[ "$volume" = $shared_vol -a ! -d /mnt/$shared_vol/ctdb ]  && (
		mkdir /mnt/$shared_vol/ctdb -p
#		mkdir /mnt/$shared_vol/public -p
#		chmod 777 /mnt/$shared_vol/public
	)
	[ "$volume" = $shared_vol ] && continue
	chmod 777 /mnt/$volume
	cat >>/tmp/.demo.smbshare <<EOF
[$volume]
	comment= $volume share
	path = /mnt/$volume/
	public = yes
	writeable = yes

EOF
done


mount|grep /mnt/$shared_vol >/dev/null
if [ $? -ne 0 ];then
	waitmsg "
Demovol not mounted, this node fail to setup!"
	exit 1
fi

mount|grep /mnt/demovol >/dev/null
if [ $? -ne 0 ];then
	waitmsg "
Demovol not mounted, this node fail to setup!"
	exit 1
fi

#
#setup ctdb
#
mkdir /mnt/$shared_vol/config/ctdb -p
mkdir /mnt/$shared_vol/config/samba -p
rm /etc/ctdb/public_addresses 2>/dev/null
ln -sf /mnt/$shared_vol/config/ctdb/public_addresses /etc/ctdb/public_addresses
rm /etc/ctdb/nodes 2>/dev/null
ln -sf /mnt/$shared_vol/config/ctdb/nodes /etc/ctdb/nodes
rm /etc/sysconfig/ctdb 2>/dev/null
ln -sf /mnt/$shared_vol/config/ctdb/ctdb /etc/sysconfig/ctdb
rm /etc/samba/smb.conf 2>/dev/null
ln -sf /mnt/$shared_vol/config/samba/smb.conf /etc/samba/smb.conf

>/etc/ctdb/public_addresses
for nid in `seq 0 $peercount`
do
	echo "$public_subnet.0.2$nid/16 $public_nic" >>/etc/ctdb/public_addresses
done

>/etc/ctdb/nodes 
for nid in `seq 0 $peercount`
do
	echo "$internal_subnet.0.2$nid" >>/etc/ctdb/nodes
done

cat >/etc/sysconfig/ctdb <<EOF
CTDB_RECOVERY_LOCK="/mnt/$shared_vol/ctdb/lock"
# CTDB_PUBLIC_INTERFACE=eth0
CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses
# CTDB_LVS_PUBLIC_IP=10.1.1.1
CTDB_MANAGES_SAMBA=yes
# CTDB_SAMBA_SKIP_SHARE_CHECK=yes
# CTDB_NFS_SKIP_SHARE_CHECK=yes
# CTDB_SAMBA_CHECK_PORTS="445"
CTDB_MANAGES_WINBIND=yes
# CTDB_MANAGES_VSFTPD=yes
# CTDB_MANAGES_ISCSI=yes
# CTDB_MANAGES_NFS=yes
# CTDB_MANAGES_HTTPD
# CTDB_INIT_STYLE=redhat
# CTDB_SERVICE_SMB=smb
# CTDB_SERVICE_NMB=nmb
# CTDB_SERVICE_WINBIND=winbind
ulimit -n 10000
# CTDB_NODES=/etc/ctdb/nodes
# CTDB_NOTIFY_SCRIPT=/etc/ctdb/notify.sh
# CTDB_DBDIR=/var/ctdb
# CTDB_DBDIR_PERSISTENT=/var/ctdb/persistent
# CTDB_EVENT_SCRIPT_DIR=/etc/ctdb/events.d
# CTDB_SOCKET=/tmp/ctdb.socket
# CTDB_TRANSPORT="tcp"
# CTDB_MONITOR_FREE_MEMORY=100
# CTDB_START_AS_DISABLED="yes"
# CTDB_CAPABILITY_RECMASTER=yes
# CTDB_CAPABILITY_LMASTER=yes

# CTDB_NATGW_PUBLIC_IP=10.0.0.227/24
# CTDB_NATGW_PUBLIC_IFACE=eth0
# CTDB_NATGW_DEFAULT_GATEWAY=10.0.0.1
# CTDB_NATGW_PRIVATE_NETWORK=10.1.1.0/24
# CTDB_NATGW_NODES=/etc/ctdb/natgw_nodes


# PER_IP_ROUTING configuration
# CTDB_PER_IP_ROUTING_DEBUG=yes lets the script print out
# CTDB_DEBUGLEVEL=DEBUG implies CTDB_PER_IP_ROUTING_DEBUG=yes.
#
# CTDB_PER_IP_ROUTING_CONF="/etc/ctdb/per_ip_routing.conf"
# CTDB_PER_IP_ROUTING_CONF="__auto_link_local__"
# CTDB_PER_IP_ROUTING_TABLE_ID_LOW=10
# CTDB_PER_IP_ROUTING_TABLE_ID_HIGH=250
# CTDB_PER_IP_ROUTING_RULE_PREF=10000
# CTDB_PER_IP_ROUTING_DEBUG=no

# CTDB_PARTIALLY_ONLINE_INTERFACES="yes"

# CTDB_LOGFILE=/var/log/log.ctdb
CTDB_DEBUGLEVEL=ERR

# CTDB_SUPPRESS_COREFILE=yes

# CTDB_SYSLOG=no

# CTDB_RUN_TIMEOUT_MONITOR=no

# CTDB_MAX_PERSISTENT_CHECK_ERRORS=0

# CTDB_LOG_RINGBUF_SIZE=500000
#    CTDB_SET_TRAVERSETIMEOUT=60
# CTDB_OPTIONS=

EOF

cat >/etc/samba/smb.conf <<EOF
[global]
	clustering = yes
	idmap backend = tdb2
#	private dir=/mnt/$shared_vol/ctdb
	field:mapping = fsname
	use mmap = no
	nt acal support = yes
	ea support = yes
	include = /etc/samba/performance
EOF
cat /tmp/.demo.smbshare >>/etc/samba/smb.conf
#start samba
/etc/init.d/ctdb start


read -p "
This node setup ok, when all nodes setup have been done, press Enter to saving the configuation for next time bootup.

IF ALL nodes done, press Enter key here ..."

while true
do
	
	[ $okcnt -eq $peercount ] && break
	m=`waitinput "Some nodes not detected, probe again?[YES/no] " yes`
	[ "$m" = "no" ] && break
	probe_other
	okcnt=$?
done

#saving configuration
save=`cat /tmp/.demo.savebrick`
if [ -d /bricks/$save ];then
	cd /var/
	tar zcf /bricks/$save/.saved.tgz lib/glusterd #ctdb
	waitmsg "Configuration saved!"
fi

read -t 5 -p "Waiting server start ..."
smbpasswd -a nobody -s <<EOF
demo
demo
EOF
